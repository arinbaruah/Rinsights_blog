{
  "hash": "ee2528fd92190cd8619930241e496a9f",
  "result": {
    "markdown": "---\ntitle: \"‚öôÔ∏è‚ö†Ô∏è Can we accurately predict if a machine is going to undergo failure using machine learning ?\"\nauthor: \"Arindam Baruah\"\ndate: \"2023-06-23\"\ncategories: [analysis,exploratory data analysis,visualisation,statistics,machine learning,regression,classification]\nimage: \"mach_failure.jpeg\"\nnumber-sections: true\ntoc: true\nexecute: \n  echo: false\n  warning: false\n  message: false\n---\n\n\n# Introduction\n\nBinary machine failure prediction using machine learning is a technique employed to anticipate the occurrence of failures or malfunctions in a binary system or machine. With the increasing complexity of modern machines, the ability to predict and prevent failures becomes crucial for optimizing performance, reducing downtime, and avoiding costly repairs.\n\nMachine learning algorithms play a vital role in this prediction process by analyzing historical data and identifying patterns or anomalies that indicate potential failures. These algorithms learn from past failure instances, considering various factors such as sensor readings, environmental conditions, maintenance records, and other relevant parameters.\n\nThe predictive models are trained on labeled datasets, where each instance is associated with a failure or non-failure outcome. Common machine learning techniques used for binary machine failure prediction include __logistic regression, decision trees, random forests, support vector machines (SVM), and neural networks__.\n\nDuring the training phase, the algorithms learn the relationships between input features and failure occurrences, thereby enabling them to make accurate predictions on unseen data. Feature engineering, which involves selecting or transforming relevant input variables, is an essential step in improving the model's performance.\n\nOnce the model is trained, it can be deployed to make real-time predictions on new data streams. By continuously monitoring machine inputs and comparing them to the learned patterns, the system can generate alerts or take preventive actions whenever a potential failure is detected. This proactive approach helps minimize unexpected downtime, reduce maintenance costs, and improve overall operational efficiency.\n\nBinary machine failure prediction using machine learning is widely applied across various industries, including manufacturing, power generation, healthcare, transportation, and more. By leveraging the power of data and advanced analytics, it offers a valuable tool for optimizing maintenance strategies, enhancing productivity, and ensuring the reliability of critical systems.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![Source: www.gesrepair.com](mach_failure.jpeg){#fig-fail width=512}\n:::\n:::\n\n\n# Importing the relevant libraries and dataset üõ†Ô∏è\n\nFirst, we import the required libraries which we will use to perform the current analysis.\n\n\n::: {.cell}\n\n:::\n\n\nGreat ! We have all the libraries loaded. Next, we are gonna load the required dataset for conducting the machine failure classification analysis. \n\nWe will use one dataset for the purpose of exploratory data analysis and training the classification model while the test dataset for testing the classification model on a completely new dataset.\n\nAfter reading the data, let us see how the train dataset looks like.\n\n\n::: {#tbl-train .cell tbl-cap='Glimpse of the train dataset'}\n::: {.cell-output-display}\n`````{=html}\n<table class=\" lightable-paper\" style='font-size: 9px; font-family: \"Arial Narrow\", arial, helvetica, sans-serif; margin-left: auto; margin-right: auto;'>\n <thead>\n  <tr>\n   <th style=\"text-align:right;\"> id </th>\n   <th style=\"text-align:left;\"> Product ID </th>\n   <th style=\"text-align:left;\"> Type </th>\n   <th style=\"text-align:right;\"> Air temperature [K] </th>\n   <th style=\"text-align:right;\"> Process temperature [K] </th>\n   <th style=\"text-align:right;\"> Rotational speed [rpm] </th>\n   <th style=\"text-align:right;\"> Torque [Nm] </th>\n   <th style=\"text-align:right;\"> Tool wear [min] </th>\n   <th style=\"text-align:right;\"> Machine failure </th>\n   <th style=\"text-align:right;\"> TWF </th>\n   <th style=\"text-align:right;\"> HDF </th>\n   <th style=\"text-align:right;\"> PWF </th>\n   <th style=\"text-align:right;\"> OSF </th>\n   <th style=\"text-align:right;\"> RNF </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:left;width: 30em; background-color: yellow !important;\"> L50096 </td>\n   <td style=\"text-align:left;\"> L </td>\n   <td style=\"text-align:right;\"> 300.6 </td>\n   <td style=\"text-align:right;\"> 309.6 </td>\n   <td style=\"text-align:right;\"> 1596 </td>\n   <td style=\"text-align:right;\"> 36.1 </td>\n   <td style=\"text-align:right;\"> 140 </td>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:right;font-weight: bold;border-right:1px solid;\"> 0 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 1 </td>\n   <td style=\"text-align:left;width: 30em; background-color: yellow !important;\"> M20343 </td>\n   <td style=\"text-align:left;\"> M </td>\n   <td style=\"text-align:right;\"> 302.6 </td>\n   <td style=\"text-align:right;\"> 312.1 </td>\n   <td style=\"text-align:right;\"> 1759 </td>\n   <td style=\"text-align:right;\"> 29.1 </td>\n   <td style=\"text-align:right;\"> 200 </td>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:right;font-weight: bold;border-right:1px solid;\"> 0 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 2 </td>\n   <td style=\"text-align:left;width: 30em; background-color: yellow !important;\"> L49454 </td>\n   <td style=\"text-align:left;\"> L </td>\n   <td style=\"text-align:right;\"> 299.3 </td>\n   <td style=\"text-align:right;\"> 308.5 </td>\n   <td style=\"text-align:right;\"> 1805 </td>\n   <td style=\"text-align:right;\"> 26.5 </td>\n   <td style=\"text-align:right;\"> 25 </td>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:right;font-weight: bold;border-right:1px solid;\"> 0 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 3 </td>\n   <td style=\"text-align:left;width: 30em; background-color: yellow !important;\"> L53355 </td>\n   <td style=\"text-align:left;\"> L </td>\n   <td style=\"text-align:right;\"> 301.0 </td>\n   <td style=\"text-align:right;\"> 310.9 </td>\n   <td style=\"text-align:right;\"> 1524 </td>\n   <td style=\"text-align:right;\"> 44.3 </td>\n   <td style=\"text-align:right;\"> 197 </td>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:right;font-weight: bold;border-right:1px solid;\"> 0 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 4 </td>\n   <td style=\"text-align:left;width: 30em; background-color: yellow !important;\"> M24050 </td>\n   <td style=\"text-align:left;\"> M </td>\n   <td style=\"text-align:right;\"> 298.0 </td>\n   <td style=\"text-align:right;\"> 309.0 </td>\n   <td style=\"text-align:right;\"> 1641 </td>\n   <td style=\"text-align:right;\"> 35.4 </td>\n   <td style=\"text-align:right;\"> 34 </td>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:right;font-weight: bold;border-right:1px solid;\"> 0 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 5 </td>\n   <td style=\"text-align:left;width: 30em; background-color: yellow !important;\"> M24300 </td>\n   <td style=\"text-align:left;\"> M </td>\n   <td style=\"text-align:right;\"> 298.4 </td>\n   <td style=\"text-align:right;\"> 308.9 </td>\n   <td style=\"text-align:right;\"> 1429 </td>\n   <td style=\"text-align:right;\"> 42.1 </td>\n   <td style=\"text-align:right;\"> 65 </td>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:right;\"> 0 </td>\n   <td style=\"text-align:right;font-weight: bold;border-right:1px solid;\"> 0 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\nFrom @tbl-train, we can observe that there are multiple process parameters present in the dataset which can help us analyse whether a machine undergoes failure. We can also observe that there are multiple abbreviations in this dataset. Let us try to understand what do these abbreviations mean :\n\n1. __Tool Wear Failure (TWF)__: A type of machine failure which is associated with excessive tool wear.\n2. __Heat Dissipation Failure (HDF)__: Machine failures which are associated with high process temperatures.\n3. __Power Failure (PWF)__: Machine failures which are associated with power readings above or below a certain value.\n4. __Overstrain Failure (OSF)__: Machine failures which are associated with high strain values.\n5. __Random Failure (RNF)__:  Machine failures which maybe associated with random conditions.\n\n# Data cleaning\n\n## Check for null values\n\nAs a part of checking for the cleanliness of the dataset, let us visaulise the presence of null values for each of the variables.\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Missingness in the dataset](index_files/figure-html/fig-missvis-1.png){#fig-missvis fig-align='center' width=672}\n:::\n:::\n\nAs we can observe from figure @fig-missvis, there are no missing values for any of the variables in the dataset. As a result, the __dataset can be considered clean__ for further analysis.\n\n## Removal of variables\n\nAfter studying for the presence of null values, we now remove the variables that do not provide any extra insights into our analysis.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_train <- df_train %>% select(-c(id,`Product ID`))\n```\n:::\n\n\n## Cleaning the variable names\n\nThe current dataset contains variable names which are not ideal for data wrangling and EDA. Hence, we will try to remove any unnecessary white space and special characters for each of the variable names.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_train <- clean_names(df_train)\nhead(df_train)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 √ó 12\n  type  air_temperature_k process_temperature_k rotational_speed_rpm torque_nm\n  <chr>             <dbl>                 <dbl>                <dbl>     <dbl>\n1 L                  301.                  310.                 1596      36.1\n2 M                  303.                  312.                 1759      29.1\n3 L                  299.                  308.                 1805      26.5\n4 L                  301                   311.                 1524      44.3\n5 M                  298                   309                  1641      35.4\n6 M                  298.                  309.                 1429      42.1\n# ‚Ñπ 7 more variables: tool_wear_min <dbl>, machine_failure <dbl>, twf <dbl>,\n#   hdf <dbl>, pwf <dbl>, osf <dbl>, rnf <dbl>\n```\n:::\n:::\n\n\n\n\n# Exploratory Data Analysis\n\nAfter obtaining the cleansed dataset, we now try to visualise the relationship of each of the variables and attempt to obtain critical insights.\n\n## Type of machine\n\nThere are a total of 3 types  machines in this dataset. These are encoded as:\n\n1. __L (Light)__\n2. __M (Medium)__\n3. __H (Heavy)__\n\nLet us see the number of machine failures for each of the machine types.\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Number of machine failures for each type](index_files/figure-html/fig-failtype-1.png){#fig-failtype fig-align='center' width=672}\n:::\n:::\n\n\n\nFigure @fig-failtype illustrates the number of failures observed for each machine type. The failures constitute:\\\n- __1 %__ of the incidents for machine type \"H\"\\\n- __2 %__ of the incidents for machine type \"L\"\\\n- __1 %__ of the incidents for machine type \"M\"\\\n\n<div class=\"alert alert-info\">\n üìµ <strong> Hence, we can observe that the number of failure cases are fairly evenly distributed among each of the machine types. </strong> üìµ .\n</div>\n\n\n## Air and process temperatures {#sec-label2}\n\nTemperatures can play a critical role in relation to machine health. In this dataset, we have air and process temperatures. The difference of these values could allow us to understand the overall heat dissipation of the machines. Analysing these variables may allow us when do the machines undergo overall failure as well as heat dissipation failure (HDF).\n\nLet us first study the distribution of the temperature values.\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Temperature variation distribution](index_files/figure-html/fig-temps-1.png){#fig-temps fig-align='center' width=672}\n:::\n:::\n\n\nAs we can observe from @fig-temps, majority of the heat dissipation failures have occurred __at relatively higher values of air temperatures__. These air temperatures are observed to be __around 302.5 K__. Higher air temperatures invariably leads to lower value of heat dissipation which may cause heat dissipation failure and subsequently, machine failure.\n\nHeat dissipation values are governed by the following heat transfer equation.\n\n$$ \\boxed{\\Delta H = mC_p(T_{process} - T_{air})}$$\nBased on the above equation, let us now study how the difference between process and air temperatures vary for heat dissipation failures.\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Heat dissipation failure based on temperature difference](index_files/figure-html/fig-tempdiff-1.png){#fig-tempdiff fig-align='center' width=672}\n:::\n:::\n\n\n\n\nAs illustrated by figure @fig-tempdiff and based on the heat transfer equation, we can observe that \n\n\n<div class=\"alert alert-info\">\n  <strong> ‚ö†Ô∏è the majority of the heat dissipation failures occur at low temperature differences between process and air temperatures. ‚ö†Ô∏è </strong> .\n</div>\n\n## Torque and Tool rotation speed {#sec-label1}\n\nThe torque of a machine can be defined as the amount of rotational energy required to perform mechanical work. As a result of torque applied, a machine element, such as the tool in this case rotates at a particular speed. This speed of rotation is measured by the tool rotation speed in revolutions per minute (RPM).\n\nIn addition to the above definitions, the product of the torque and the tool rotation speeds give us the value of the power consumption of a machine. The equaiton for the same is as follows :\n\n$$ \\boxed{P = \\omega T} $$\nWhere,\n\n$P =$ Power consumption of the machine in Watts\\\n$T =$ Torque in Nm\\\n$\\omega =  2\\pi N/60$, with $N$ being the tool rotational speed (RPM)\\\n\nLet us now visualise the torque and tool rotation speed values for each machine type.\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Working window of Torque and Rotational speeds](index_files/figure-html/fig-pwf-1.png){#fig-pwf fig-align='center' width=672}\n:::\n:::\n\n\nBased on the plot in figure @fig-pwf, we can observe \n\n<div class=\"alert alert-info\">\n  <strong> ‚ö†Ô∏èThe ideal working window for torque lies between 25 Nm - 50 Nm while that for the rotational speed lies between 1250-2000 RPM . ‚ö†Ô∏è </strong> .\n</div>\n\nLet us now try to study how do the values for tool rotation speeds and torque vary based on power failure (PWF) faceted for each machine type.\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Faceted hex plot of working windows for each machine type](index_files/figure-html/fig-facetwindown-1.png){#fig-facetwindown fig-align='center' width=672}\n:::\n:::\n\n\nBased on the analysis of figure @fig-facetwindown we can conclude that\n\n<div class=\"alert alert-info\">\n  ‚ùå Power failures (PWF) are observed to majorly occur outside the ideal working window. These failures are <strong> majorly concentrated in either the regions of high torque and low rotational speeds or low torque and high rotational speeds. The observation holds consistent for all three machine types ‚ùå </strong> .\n</div>\n\n## Power consumption\n\nBased on the analysis in section @sec-label1, let us study how does the power consumption differ for machines which have undergone power failure (PWF).\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Probability density of power consumption for each PWF status](index_files/figure-html/fig-power-1.png){#fig-power fig-align='center' width=672}\n:::\n:::\n\nFigure @fig-power illustrates the density distribution of power consumption for each power failure (PWF) status and faceted for each of the machine types. We can observe that:\n\n<div class=\"alert alert-info\">\n  ‚ö°Ô∏èthe density plot for machines which have undergone power failure is bimodal in nature while the plot is unimodal for machines which did not undergo power failure. Based on the density plot, we can observe that the ideal working window for power consumption should be between 4000-10000 W. Machines reporting power consumption below or above this band are observed to be prone to undergo power failure.‚ö°Ô∏è\n</div>\n\n## Toolwear \n\nThe toolwear can play a critical role in terms of overstrain failure (OSF) as __it can lead to excess loads on various parts of the machine equipment.__ Hence, it is pertinent to study the importance of toolwear through visualisations.\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Tool wear values for overstrain failure status (OSF) faceted for each machine type](index_files/figure-html/fig-toolwear-1.png){#fig-toolwear fig-align='center' width=672}\n:::\n:::\n\n\nAfter analysing figure @fig-toolwear, we observe that\n\n<div class=\"alert alert-info\">\n  üî© Overstrain failures as a result of tool wear occurs <strong> majorly for tool wear values of 200 mm or above </strong>. While there are some overstrain failures at low toolwear values, however, OSF is majorly a result of higher toolwear as can be observed through the violin plots. This observation is fairly consistent for each of the three machine types.   üî©.\n</div>\n\n\n# Feature Engineering\n\nWe will majorly concentrate on two new features. These features have already been analysed in sections @sec-label1 and @sec-label2. These __features are namely temperature difference and power consumption.__\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_train <- df_train %>% mutate(temp_diff_k = process_temperature_k - air_temperature_k) %>% select(-c(process_temperature_k,air_temperature_k))\ndf_train <- df_train %>% mutate(power_w = torque_nm * 2* pi * rotational_speed_rpm/60) %>% select(-c(torque_nm,rotational_speed_rpm))\n```\n:::\n\n\n\n\nIn the next step, we will encode the character variable for machine type into machine readable format __by one hot encoding the variable__ as shown below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_train$type <- factor(df_train$type)\ndt_train <- data.table(df_train)\ndt_train <- one_hot(dt_train,cols = as.factor(\"type\"))\n\ndf_train <- as.data.frame(dt_train)\n```\n:::\n\n\n# Correlation plot\n\nAfter analysing the various variables and performing feature engineering, let us create a correlation plot.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![Correlation plot for the various features in the data](index_files/figure-html/fig-corrplot-1.png){#fig-corrplot width=672}\n:::\n:::\n\n\n\n\n<div class=\"alert alert-info\">\n üí° Based on the above correlation plot, we can observe that machine failure has <strong> high correlation with TWF,PSF,HDF,OSF and RNF </strong>. This indicates that a failure for any of these individual variables could lead to machine failure üí°.\n</div>\n\n# Classification model\n\nIn order to create a classification, we must first segregate the dataset into train and test datasets.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(101)\nsample=sample.split(df_train$machine_failure,SplitRatio=0.7)\ntrain=subset(df_train,sample==T)\ntest=subset(df_train,sample==F)\n```\n:::\n\n\nAfter creating the required train and test dataframes, we now train the dataset by applying various classification algorithms. These have been delineated in the following sections.\n\n## Logistic Regression\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel_logit <- glm(machine_failure~.,family=binomial(link='logit'),data=train)\npR2(model_logit)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nfitting null model for pseudo-r2\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n          llh       llhNull            G2      McFadden          r2ML \n-2224.7236061 -7735.2112184 11020.9752246     0.7123901     0.1089918 \n         r2CU \n    0.7287878 \n```\n:::\n:::\n\n<div class=\"alert alert-info\">\n üí° Upon studying the McFadden $R^2$ value, we observe that the <strong>model accuracy was approximately 71.2% </strong> üí°.\n</div>\n\n\nLet us now observe how well we can predict on the test dataset based on the logistic regression model.\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Accuracy of logistic regression: 0.996090695856138\"\n```\n:::\n:::\n\n\n\nAs we can observe, the logistic regression model was able to __accurately predict 97.2% of the machine failures__.\n\nLet us further study the performance of the logistic regression model through the Receiver Operating Curve (ROC) metric.\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Receiver Operating Curve for Logistic Regression](index_files/figure-html/fig-roclogit-1.png){#fig-roclogit fig-align='center' width=672}\n:::\n:::\n\n\nBased on the ROC as illustrated by figure @fig-roclogit, we can observe that a large section of the upper half of the plot has been covered by the operating curve. \n\n\n\n<div class=\"alert alert-info\">\n üí° The Area Under Curve (AUC) score of 0.9261326 suggests that the model was able to <strong> predict the machine failures fairly well. </strong> üí°\n</div>\n\n\nNext, we try to obtain a more intuitive performance metric of the model by creating a confusion matrix.\n\n\n\n::: {.cell}\n\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Confusion matrix for Logistic Regression](index_files/figure-html/fig-confmat-1.png){#fig-confmat fig-align='center' width=672}\n:::\n:::\n\nFigure @fig-confmat illustrates the confusion matrix for the logistic regression model along with its various performance metrics.\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\n## Random Forest\n\nLet us use an ensemble algorithm to classify our results. We shall utilise the Random Forest technique which utilises multiple decision trees to predict results.\n\n\n::: {.cell}\n\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Error vs Number of trees for Random Forest](index_files/figure-html/fig-errormod-1.png){#fig-errormod fig-align='center' width=672}\n:::\n:::\n\nAs we can observe from figure @fig-errormod, \n\n\n<div class=\"alert alert-info\">\n üí° the error of the random forest model is observed to reduce <strong> as the number of trees cross 100 </strong>. üí°\n</div>\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Confusion matrix of the random forest model](index_files/figure-html/fig-confmatrf-1.png){#fig-confmatrf fig-align='center' width=672}\n:::\n:::\n\n::: {.cell}\n\n:::\n\n\n## XGboost\n\nLet us try to use an extra gradient boosted ensemble method commonly termed as the XGboost classifier.\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n[1]\ttrain-logloss:0.144407 \n[2]\ttrain-logloss:0.059787 \n```\n:::\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Confusion matrix of the XGBoost model](index_files/figure-html/conf-mat-xgb-1.png){fig-align='center' width=672}\n:::\n:::\n\n::: {.cell}\n\n:::\n\n\n\n## Light GBM\n\nLet us utilise the LGBM algorithm and train it on the given dataset.\n\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Confusion matrix of the Light GB model](index_files/figure-html/cf-lgb-1.png){fig-align='center' width=672}\n:::\n:::\n\n::: {.cell}\n\n:::\n\n\n\n## Catboost\n\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Feature importance using Catboost model](index_files/figure-html/catb-1.png){fig-align='center' width=672}\n:::\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Confusion matrix of the Catboost model](index_files/figure-html/cf-cat-1.png){fig-align='center' width=672}\n:::\n:::\n\n::: {.cell}\n\n:::\n\n\n\n\n## Feature transformation and model implementation\n\nNow that we have created all our baseline models, let us try our hand out with some feature transformation with standard scaling options.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntrain$tool_wear_min <- train$tool_wear_min %>% scale(center=TRUE,scale=TRUE)\ntrain$power_w <- train$power_w %>% scale(center=TRUE,scale=TRUE)\ntrain$temp_diff_k <- train$temp_diff_k %>% scale(center=TRUE,scale=TRUE)\n\ntest$tool_wear_min <- test$tool_wear_min %>% scale(center=TRUE,scale=TRUE)\ntest$power_w <- test$power_w %>% scale(center=TRUE,scale=TRUE)\ntest$temp_diff_k <- test$temp_diff_k %>% scale(center=TRUE,scale=TRUE)\n\n\ncols <- c(\"twf\",\"hdf\",\"pwf\",\"osf\",\"rnf\")\n\n\ntrain %<>%\n       mutate_each_(funs(factor(.)),cols)   #Converting  to factors\ntest %<>%\n       mutate_each_(funs(factor(.)),cols)\ndf_test %<>%\n       mutate_each_(funs(factor(.)),cols)\n```\n:::\n\n\nNow that we have standardised all the continuous numeric variables, let us attempt to train the model once again on the scaled dataset.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel_logit <- glm(machine_failure~.,family=binomial(link='logit'),data=train)\npR2(model_logit)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nfitting null model for pseudo-r2\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n          llh       llhNull            G2      McFadden          r2ML \n-2224.7236061 -7735.2112184 11020.9752246     0.7123901     0.1089918 \n         r2CU \n    0.7287878 \n```\n:::\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Accuracy of logistic regression: 0.996090695856138\"\n```\n:::\n:::\n\n::: {.cell}\n\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../../../site_libs/kePrint-0.0.1/kePrint.js\"></script>\n<link href=\"../../../site_libs/lightable-0.0.1/lightable.css\" rel=\"stylesheet\" />\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}